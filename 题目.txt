Q：TCP/IP编程服务器端主要调用哪些接口

A：bind listen connect send read write等等

 

Q：select/poll/epoll的区别

A：三种IO多路复用 epoll性能更高，节省更多开销

 

Q：recv函数的返回值及其意义

A：当应用程序调用recv函数时，

    （1）recv先等待socket的发送缓冲中的数据被协议传送完毕，如果协议在传送socket的发送缓冲中的数据时出现网络错误，那 么recv函数返回SOCKET_ERROR，

    （2）如果socket的发送缓冲中没有数据或者数据被协议成功发送完毕后，recv先检查套接字socket的接收缓冲区，如果接收缓冲区中没有数据或者协议正在接收数据，那么recv就一直等待，直到协议把数据接收完毕。当协议把数据接收完毕，rec函数就把socket的接收缓冲中的数据copy到buffer中（注意协议接收到的数据可能大于buf的长度，所以 在这种情况下要调用几次recv函数才能把socket的接收缓冲中的数据copy完。recv函数仅仅是copy数据，真正的接收数据是协议来完成的），rec函数返回其实际copy的字节数。如果recv在copy时出错，那么它返回SOCKET_ERROR；如果recv函数在等待协议接收数据时网络中断了，那么它返回0。

 

Q：进程之间通讯有哪几种方式？

A：无名管道（父子间）、有名管道（无亲缘关系也可以）、消息队列（消息的链表）、信号量（计数器，一种同步手段）、信号、共享内存、套接字等等

 

Q：进程和线程的优缺点，各适用于什么场合？

A：进程优点：使任务并发执行；每个进程互相独立不影响；容易扩充性能

      进程缺点：逻辑控制复杂；调度开销大

      线程优点：无需跨进程边界；程序逻辑和控制方式简单；所有线程可以直接共享内存和变量

      线程缺点：一个线程的崩溃可能影响到整个程序的稳定性；调度开销大，性能扩充难

      多线程比多进程成本低，但性能更低，线程适用于对性能要求不高的场合

 

Q：extern "C"的作用

A：指示编译器这部分代码按C语言的进行编译，更好地支持旧代码

 

Q：map和hash_map的区别

A：map的基础数据结构是红黑树，hash_map的基础数据结构是哈希表，hashmap的查询时间复杂度比较低，适合记录比较多的情况

 

Q：非递归求二叉树的深度搜索

A：使用队列，加个level变量++深度增加

 

Q：Top K海量数据查找

A：先通过Hash法，把这1亿个数字去重复，然后创建最小堆，比较、替换堆顶元素再重新调整为最小堆，直至遍历完

 

Q：基类的析构函数必须为虚函数吗？

A：如果确定程序中有基类指针指向派生类的问题，则必须将基类的析构函数指定为虚函数，否则不需要

 

Q：vector list 区别

A：vector和数组类似，list用双向链表实现，它们的区别就是数组/链表的区别

 

Q：单链表找环

A：保存遍历过的节点（空间更少方法：一边遍历一边反转链表（翻转指针），如果有环会掉头走回头结点）

 

Q：静态链接库和动态链接库的区别

A：静态：函数代码直接链接进目标程序；动态：程序运行的时候再从DLL中寻找相应函数代码

      静态执行速度略比动态链接库快

      动态更加节省内存，提高了可维护性和可扩展性，适合大规模开发

 

Q：一个C++程序从编译到运行都经历了哪些阶段

A：编译预处理－>编译－>优化程序－>汇编程序－>链接程序－>可执行文件

 

Q：观察者模式

A：观察者设计模式定义了对象间的一种一对多的组合关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新（“注册——通知——撤销注册”）

 

Q：大端法和小端法指的是什么

A：最高有效字节在最前面的方式称为大端法，小端法相反

 

Q：判断两个链表有没有交点

A：如果他们相交的话，那么他们最后的一个节点一定是相同的



2. 虚函数原理（没答好）

3. 慢启动/拥塞

4. TCP四次分手

5. Map 底层构成

6. 算法题三个要求时间复杂度最低

  A:  比较两个字符串是否有相同字符

  B：数组里面的子数组含有正数和负数 求子数组和的最大值



电话面试题目：
1. 异步通信和同步通信的区别？
同步通信与异步通信区别：

   1.同步通信要求接收端时钟频率和发送端时钟频率一致，发送端发送连续的比特流；异步通信时不要求接收端时钟和发送端时钟同步，发送端发送完一个字节后，可经过任意长的时间间隔再发送下一个字节。
    2.同步通信效率高；异步通信效率较低。
    3.同步通信较复杂，双方时钟的允许误差较小；异步通信简单，双方时钟可允许一定误差。
    4.同步通信可用于点对多点；异步通信只适用于点对点。


2. TCP协议的作用？三次握手是通过什么方法来保证通信双方确认的正确？

  TCP提供的可靠数据传输服务，是依靠接收端TCP软件按序号对收到的数据分组进行逐一确认实现的。这个过程在TCP收发端开始通信时，被称为三次握手初始化。

三次握手过程：

第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 

       第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 

       第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。


3. 操作系统执行可执行程序时，内存分配是怎样的？

一个由c/C++编译的程序占用的内存分为以下几个部分
1、栈区（stack）— 由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
2、堆区（heap）— 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。
3、全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束后有系统释放
4、文字常量区 —常量字符串就是放在这里的。程序结束后由系统释放
5、程序代码区(text)—存放函数体的二进制代码。


4. 引用和多态的区别？

答：引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。

多态是允许你将父对象设置成和它一个或更多的子对象相等的技术，赋值之后， 父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单地说就是一句话，允许将子类类型的指针赋值给父类型的指针。多态在C++中是通过虚函数实现的。


5. 堆和栈的区别？

答：stack的空间由操作系统自动分配/释放，heap上的空间需要手动分配/释放

栈的空间有限，堆是很大的自由存储区。

程序在编译期对变量和函数分配内存都在栈上进行，且程序运行过程中函数调用参数的传递也在栈上进行。


6. 进程之间通信的方式有哪些？

答：信号、信号量、消息队列、共享内存。


7. 面向对象的三个特征，分别有什么作用？

答：封装：封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。

        继承：继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展

  多态：多态性（ polymorphisn ）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。

实现多态，有二种方式，覆盖，重载。
8. 虚函数的实现机制

答：
9. 如何判断一棵树是平衡二叉树

答：如果某二叉树中任意结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。

 


10.sizeof在计算变量所占空间大小时采取的机制

答：
11.结构体struct和联合体union的区别

答：  共用体

构造数据类型,也叫联合体
用途：使几个不同类型的变量共占一段内存(相互覆盖)

结构体是一种构造数据类型
用途：把不同类型的数据组合成一个整体-------自定义数据类型

Structure 与 Union主要有以下区别:

1. struct和union都是由多个不同的数据类型成员组成, 但在任何同一时刻, union中只存放了一个被选中的成员, 而struct的所有成员都存在。在struct中，各成员都占有自己的内存空间，它们是同时存在的。一个struct变量的总长度等于所有成员长度之和。在Union中，所有成员不能同时占用它的内存空间，它们不能同时存在。Union变量的长度等于最长的成员的长度。

2. 对于union的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了, 而对于struct的不同成员赋值是互不影响的。


12.目前效率最好的内部排序是什么

答：归并排序：最差、平均、最好都是O(nlog2n)

各种排序方法对比：

一面题目：（因为比别人多了一个电话面试，所以一面的问题不再只是纯技术方面的）
1. 简单自我介绍（主要讲自己的特长、性格特点、优缺点）
答：自己发挥吧这个。


2. 大学期间自己做过的最成功的一件事

答：我觉得自己在大学最成功的事就是参加了传智播客在我们学校举办的第一届软件开发大赛，我自己从参赛到实现作品，最后获得奖项的整个过程让我都回味无穷。自己付出很多努力，那也是我学习Android做的第一个项目，整个过程自己遇到很多问题，都是自己慢慢的耐心地去解决的，最后也不枉费我花的心机，所以觉得这件事我做得蛮成功的。


3. 如果遇到一个以前完全没接触过的技术，会怎么去学习

答：首先我会先去收集资料，看看这个技术需要些什么，看如何怎么让自己快速入门。是否有视频教程或者比较好的书籍能让我对这个陌生的技术有比较好的认识的，如果有的话就制定相应的学习计划。


4. 接下来的学习计划是什么

答：我接下来的学习计划是项目驱动学习，先去了解最新的技术动态，学习把最新的技术整合到自己的项目当中去，在整合项目之前，我会尝试去做相应的Demo去实现效果，学习它实现的原理和机制。


5. 觉得大学里最难学的课程是什么

答：算法分析与设计

我觉得这门课比较难学的原因是这门课需要我们比较好的逻辑分析能力，或者要有比较好的数学功底才能学好。


6. 如何统计深圳市便利店的数目，说思路

答：说实在我没啥思路。


7. 如果你一个人在一间偏僻且设备简陋的酒店，某天晚上很晚，你突然想吃烧烤，你会怎么做？（旁边没有烧烤店，旅馆也没有工具，你住的地方离有烧烤店的地方很远，而且你也不知道怎么去，贸贸然出去可能会有危险，你会采取什么方法让自己可以安全地吃到烧烤）

答：自己想
8. 重载和覆盖的区别是什么

答：

1、方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系。
2、覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。
3、覆盖要求参数列表相同；重载要求参数列表不同。
4、覆盖关系中，调用那个方法体，是根据对象的类型（对象对应存储空间类型）来决定；重载关系，是根据调用时的实参表与形参表来选择方法体的。

 


9.MySQL数据库中，如何查看一个表的表结构，如何查看其主键（说出查看的命令）

答：desc 表名

show fields from dbname;
10.数据库的读脏活存放数据库的磁盘出现灾难性事故，有什么方法可以避免

答：使用并发控制技术的封锁技术可以避免读数据的不一致。


11. 现场手写代码，实现一个双向循环链表的增删查操作

答：

typedef structDNode

｛

    ElemType data;

struct DNode *prior, *next；

｝DNode, * DoubleList;

插入操作：

intDlinkIns(DoubleList L, int i, ElemType e)

{

 DNode *s, *p;

s=(DNode*) malloc(sizeof(DNode));

if(s)

{

    s->data = e;

s->prior =p->prior; p->prior->next = s;

s->next= p;p->prior=s;

return TRUE;

}

       else

       returnFALSE;

}

 

删除操作：

intDlinkDel(DoubleList L, int i, ElemType *e)

｛

DNode *p;

*e = p->data;

p->prior->next= p->next;

p->next->prior=p->prior;

free(p);

return TRUE;

｝


 

 



二面题目：
1. 简单自我介绍
答：自由发挥。


2. C++和Java的区别，JVM是什么，具体用来做什么

答：我觉得C++与Java最大的区别是在于内存管理上，C++的内存管理是需要程序员自己控制的，自己开了需要自己去释放。然而Java提供了JVM，JVM就是用来进行内存管理的，不需要程序员自己手动开关。

Java呢，摒弃了C++很多复杂的特性，比如指针、多继承、操作符重载等等，相对来说Java的编程学习入门比较容易。


3. 图像处理中位图BMP的格式是怎样的（这个是针对我的图像识别项目来的）

答：这个不清楚，面试官会根据你的项目来问相关的问题，能准备的是好好复习自己所做过的项目。


4. Windows编程的知识点，如消息机制，一个自定义消息如何实现

答： 自定义消息共分为3步骤：

1）  自定义消息：#defineWM_MYMSGWM_USER+1

2）  在头文件中声明函数：      afx_msg voidonMyMsg();

3) 在消息映射中添加对应关系：

//BEGIN_MESSAGE_MAP(CDefMsgDemoDlg,CDialog)//END_MESSAGE_MAP()

ON_MESSAGE(WM_MYMSG,onMyMsg)

4）定义函数void onMyMsg();

核心即：函数原型、关联消息与消息响应函数的宏、函数实现。


5. 简单介绍一下Java中的集合框架（有哪些类构成和包括哪些接口）

答：

集合框架：用来表示和操作的统一的架构，包含了实现集合的接口与类



由上图可知，所有Collection是上级接口，接口List、Queue、Set接口都继承与它

实现List接口的类有ArrayList、LinkList

实现Queue接口的类有LinkList

实现Set接口的类有HashSet、SortedSet

Map也是一个接口，实现它的类有HashMap、SortedMap


6. 如果是自己为一个类写一个sizeof函数，应该考虑哪些问题

答：
7. 虚函数和虚继承对于一个类求sizeof的影响有什么差别

答：


8. 说一下为什么觉得自己适合做开发

答：首先我对编程就有很大的兴趣，兴趣是最好的老师。我本人有较好的语言基础并且具备去做开发的职业技能。我个人在平时学习工作中都比较耐心，有较好的抗压能力，这是做开发必备的素质。兴趣+能力+素质，我想这三点就能让我可以认为自己适合做开发。


9. 求最大子串和，说思路

答：含义：从元素i开始，到元素j为止的所有的元素构成的子段有多个，这些子段中的子段和最大的那个。

那么：

q      如果：b[j-1]>0, 那么b[j]=b[j-1]+a[j]

q      如果：b[j-1]<=0,那么b[j]=a[j]

这样，显然，我们要求的最大子段和，是b[j]数组中最大的那个元素。

int MaxSubSum(int n, int *a)
{
    int sum=0, b=0;

    for (int i=1;i<=n; i++)
    {
        if (b>0) b+=a[i];
        else b=a[i];
        if (b>sum) sum=b;
    }
    return sum;
}





